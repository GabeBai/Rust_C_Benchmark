<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>__x64_sys_poll (138,388 samples, 0.03%)</title><rect x="230.4" y="341" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="233.40" y="351.5" ></text>
</g>
<g >
<title>native_write_msr (97,888 samples, 0.02%)</title><rect x="1189.7" y="325" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1192.71" y="335.5" ></text>
</g>
<g >
<title>schedule_tail (97,888 samples, 0.02%)</title><rect x="1189.7" y="421" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.71" y="431.5" ></text>
</g>
<g >
<title>alloc::fmt::format::format_inner (60,955,935 samples, 15.21%)</title><rect x="532.1" y="213" width="179.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="535.12" y="223.5" >alloc::fmt::format::for..</text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h915aa84a7b32a3c4 (163,512,424 samples, 40.79%)</title><rect x="231.2" y="261" width="481.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="234.19" y="271.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h915aa84a7b32a..</text>
</g>
<g >
<title>_IO_old_init (74,777,961 samples, 18.65%)</title><rect x="10.3" y="453" width="220.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="13.29" y="463.5" >_IO_old_init</text>
</g>
<g >
<title>__perf_event_task_sched_in (138,388 samples, 0.03%)</title><rect x="230.4" y="213" width="0.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="233.40" y="223.5" ></text>
</g>
<g >
<title>all (400,879,925 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>schedule (138,388 samples, 0.03%)</title><rect x="230.4" y="261" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="233.40" y="271.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h6e901a66b8cf246f (163,512,424 samples, 40.79%)</title><rect x="231.2" y="341" width="481.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="234.19" y="351.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h6e90..</text>
</g>
<g >
<title>__libc_vfork (97,888 samples, 0.02%)</title><rect x="1189.7" y="469" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.71" y="479.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::append_elements (60,955,935 samples, 15.21%)</title><rect x="532.1" y="85" width="179.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="535.12" y="95.5" >alloc::vec::Vec&lt;T,A&gt;::a..</text>
</g>
<g >
<title>native_write_msr (118,998 samples, 0.03%)</title><rect x="531.8" y="37" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="534.77" y="47.5" ></text>
</g>
<g >
<title>vm_mmap (51,483,183 samples, 12.84%)</title><rect x="910.8" y="293" width="151.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="913.76" y="303.5" >vm_mmap</text>
</g>
<g >
<title>do_execveat_common.isra.0 (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="389" width="127.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1065.70" y="399.5" >do_execveat_com..</text>
</g>
<g >
<title>begin_new_exec (99,452 samples, 0.02%)</title><rect x="10.0" y="309" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>ret_from_fork_asm (97,888 samples, 0.02%)</title><rect x="1189.7" y="453" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1192.71" y="463.5" ></text>
</g>
<g >
<title>do_mmap (51,483,183 samples, 12.84%)</title><rect x="910.8" y="261" width="151.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="913.76" y="271.5" >do_mmap</text>
</g>
<g >
<title>x64_sys_call (99,452 samples, 0.02%)</title><rect x="10.0" y="437" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (138,388 samples, 0.03%)</title><rect x="230.4" y="309" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="233.40" y="319.5" ></text>
</g>
<g >
<title>[[stack]] (74,777,961 samples, 18.65%)</title><rect x="10.3" y="469" width="220.1" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="13.29" y="479.5" >[[stack]]</text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (319,715 samples, 0.08%)</title><rect x="711.5" y="213" width="1.0" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="714.55" y="223.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (127,439 samples, 0.03%)</title><rect x="230.8" y="197" width="0.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="233.81" y="207.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (118,839,890 samples, 29.64%)</title><rect x="712.5" y="405" width="349.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="715.49" y="415.5" >do_execveat_common.isra.0</text>
</g>
<g >
<title>schedule_tail (135,913 samples, 0.03%)</title><rect x="1062.3" y="437" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1065.30" y="447.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (319,715 samples, 0.08%)</title><rect x="711.5" y="117" width="1.0" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="714.55" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="437" width="127.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1065.70" y="447.5" >do_syscall_64</text>
</g>
<g >
<title>_start (163,512,424 samples, 40.79%)</title><rect x="231.2" y="469" width="481.3" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="234.19" y="479.5" >_start</text>
</g>
<g >
<title>__x64_sys_execve (118,839,890 samples, 29.64%)</title><rect x="712.5" y="421" width="349.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="715.49" y="431.5" >__x64_sys_execve</text>
</g>
<g >
<title>alloc::string::String::push_str (60,955,935 samples, 15.21%)</title><rect x="532.1" y="133" width="179.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="535.12" y="143.5" >alloc::string::String::..</text>
</g>
<g >
<title>__x64_sys_execve (127,439 samples, 0.03%)</title><rect x="230.8" y="341" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="233.81" y="351.5" ></text>
</g>
<g >
<title>__GI_execve (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="469" width="127.0" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="1065.70" y="479.5" >__GI_execve</text>
</g>
<g >
<title>task_h_load (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="277" width="127.0" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="1065.70" y="287.5" >task_h_load</text>
</g>
<g >
<title>perf_ctx_enable (319,715 samples, 0.08%)</title><rect x="711.5" y="85" width="1.0" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="714.55" y="95.5" ></text>
</g>
<g >
<title>[unknown] (138,388 samples, 0.03%)</title><rect x="230.4" y="469" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="233.40" y="479.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (135,913 samples, 0.03%)</title><rect x="1062.3" y="405" width="0.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1065.30" y="415.5" ></text>
</g>
<g >
<title>irqentry_exit (319,715 samples, 0.08%)</title><rect x="711.5" y="181" width="1.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="714.55" y="191.5" ></text>
</g>
<g >
<title>load_elf_binary (118,839,890 samples, 29.64%)</title><rect x="712.5" y="325" width="349.8" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="715.49" y="335.5" >load_elf_binary</text>
</g>
<g >
<title>perf_ctx_enable (118,998 samples, 0.03%)</title><rect x="531.8" y="85" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="534.77" y="95.5" ></text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (163,512,424 samples, 40.79%)</title><rect x="231.2" y="245" width="481.3" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="234.19" y="255.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>perf (74,916,349 samples, 18.69%)</title><rect x="10.3" y="485" width="220.5" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="13.29" y="495.5" >perf</text>
</g>
<g >
<title>finish_task_switch.isra.0 (135,913 samples, 0.03%)</title><rect x="1062.3" y="421" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1065.30" y="431.5" ></text>
</g>
<g >
<title>__GI___poll (138,388 samples, 0.03%)</title><rect x="230.4" y="405" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="233.40" y="415.5" ></text>
</g>
<g >
<title>ret_from_fork (97,888 samples, 0.02%)</title><rect x="1189.7" y="437" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1192.71" y="447.5" ></text>
</g>
<g >
<title>std::rt::lang_start (163,512,424 samples, 40.79%)</title><rect x="231.2" y="421" width="481.3" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="234.19" y="431.5" >std::rt::lang_start</text>
</g>
<g >
<title>__libc_start_main_impl (163,512,424 samples, 40.79%)</title><rect x="231.2" y="453" width="481.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="234.19" y="463.5" >__libc_start_main_impl</text>
</g>
<g >
<title>perf_evlist__poll (138,388 samples, 0.03%)</title><rect x="230.4" y="421" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="233.40" y="431.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (163,512,424 samples, 40.79%)</title><rect x="231.2" y="293" width="481.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="234.19" y="303.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>native_write_msr (135,913 samples, 0.03%)</title><rect x="1062.3" y="341" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1065.30" y="351.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (127,439 samples, 0.03%)</title><rect x="230.8" y="325" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="233.81" y="335.5" ></text>
</g>
<g >
<title>native_write_msr (319,715 samples, 0.08%)</title><rect x="711.5" y="37" width="1.0" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="714.55" y="47.5" ></text>
</g>
<g >
<title>x86_pmu_enable (99,452 samples, 0.02%)</title><rect x="10.0" y="229" width="0.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (118,998 samples, 0.03%)</title><rect x="531.8" y="101" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="534.77" y="111.5" ></text>
</g>
<g >
<title>sh (43,248,458 samples, 10.79%)</title><rect x="1062.7" y="485" width="127.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1065.70" y="495.5" >sh</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="453" width="127.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1065.70" y="463.5" >entry_SYSCALL_6..</text>
</g>
<g >
<title>perf_ctx_enable (97,888 samples, 0.02%)</title><rect x="1189.7" y="373" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1192.71" y="383.5" ></text>
</g>
<g >
<title>dispatch_events (138,388 samples, 0.03%)</title><rect x="230.4" y="437" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="233.40" y="447.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (319,715 samples, 0.08%)</title><rect x="711.5" y="53" width="1.0" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="714.55" y="63.5" ></text>
</g>
<g >
<title>__x64_sys_execve (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="405" width="127.0" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1065.70" y="415.5" >__x64_sys_execve</text>
</g>
<g >
<title>x86_pmu_enable (118,998 samples, 0.03%)</title><rect x="531.8" y="69" width="0.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="534.77" y="79.5" ></text>
</g>
<g >
<title>native_write_msr (99,452 samples, 0.02%)</title><rect x="10.0" y="197" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>native_write_msr (138,388 samples, 0.03%)</title><rect x="230.4" y="149" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="233.40" y="159.5" ></text>
</g>
<g >
<title>perf-exec (99,452 samples, 0.02%)</title><rect x="10.0" y="485" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>__GI_execve (127,439 samples, 0.03%)</title><rect x="230.8" y="405" width="0.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="233.81" y="415.5" ></text>
</g>
<g >
<title>ctx_resched (99,452 samples, 0.02%)</title><rect x="10.0" y="261" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (135,913 samples, 0.03%)</title><rect x="1062.3" y="357" width="0.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1065.30" y="367.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (51,483,183 samples, 12.84%)</title><rect x="910.8" y="213" width="151.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="913.76" y="223.5" >kmem_cache_alloc</text>
</g>
<g >
<title>finish_task_switch.isra.0 (138,388 samples, 0.03%)</title><rect x="230.4" y="229" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="233.40" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (118,839,890 samples, 29.64%)</title><rect x="712.5" y="453" width="349.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="715.49" y="463.5" >do_syscall_64</text>
</g>
<g >
<title>begin_new_exec (67,356,707 samples, 16.80%)</title><rect x="712.5" y="309" width="198.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="715.49" y="319.5" >begin_new_exec</text>
</g>
<g >
<title>std::panicking::try::do_call (163,512,424 samples, 40.79%)</title><rect x="231.2" y="357" width="481.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="234.19" y="367.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>search_binary_handler (118,839,890 samples, 29.64%)</title><rect x="712.5" y="341" width="349.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="715.49" y="351.5" >search_binary_handler</text>
</g>
<g >
<title>schedule_hrtimeout_range (138,388 samples, 0.03%)</title><rect x="230.4" y="293" width="0.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="233.40" y="303.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (99,452 samples, 0.02%)</title><rect x="10.0" y="405" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (138,388 samples, 0.03%)</title><rect x="230.4" y="277" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="233.40" y="287.5" ></text>
</g>
<g >
<title>bprm_execve (127,439 samples, 0.03%)</title><rect x="230.8" y="309" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="233.81" y="319.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (97,888 samples, 0.02%)</title><rect x="1189.7" y="405" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1192.71" y="415.5" ></text>
</g>
<g >
<title>select_task_rq_fair (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="325" width="127.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1065.70" y="335.5" >select_task_rq_..</text>
</g>
<g >
<title>x86_pmu_enable (319,715 samples, 0.08%)</title><rect x="711.5" y="69" width="1.0" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="714.55" y="79.5" ></text>
</g>
<g >
<title>x64_sys_call (138,388 samples, 0.03%)</title><rect x="230.4" y="357" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="233.40" y="367.5" ></text>
</g>
<g >
<title>perf_event_enable_on_exec (99,452 samples, 0.02%)</title><rect x="10.0" y="277" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (99,452 samples, 0.02%)</title><rect x="10.0" y="213" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>std::panic::catch_unwind (163,512,424 samples, 40.79%)</title><rect x="231.2" y="389" width="481.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="234.19" y="399.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>intel_pmu_enable_all (97,888 samples, 0.02%)</title><rect x="1189.7" y="341" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1192.71" y="351.5" ></text>
</g>
<g >
<title>x86_pmu_enable (135,913 samples, 0.03%)</title><rect x="1062.3" y="373" width="0.4" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1065.30" y="383.5" ></text>
</g>
<g >
<title>x86_pmu_enable (138,388 samples, 0.03%)</title><rect x="230.4" y="181" width="0.4" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="233.40" y="191.5" ></text>
</g>
<g >
<title>sysvec_reschedule_ipi (319,715 samples, 0.08%)</title><rect x="711.5" y="197" width="1.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="714.55" y="207.5" ></text>
</g>
<g >
<title>core::fmt::write (60,955,935 samples, 15.21%)</title><rect x="532.1" y="165" width="179.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="535.12" y="175.5" >core::fmt::write</text>
</g>
<g >
<title>intel_pmu_enable_all (118,998 samples, 0.03%)</title><rect x="531.8" y="53" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="534.77" y="63.5" ></text>
</g>
<g >
<title>__cond_resched (127,439 samples, 0.03%)</title><rect x="230.8" y="245" width="0.4" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="233.81" y="255.5" ></text>
</g>
<g >
<title>perf_ctx_enable (135,913 samples, 0.03%)</title><rect x="1062.3" y="389" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1065.30" y="399.5" ></text>
</g>
<g >
<title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (60,955,935 samples, 15.21%)</title><rect x="532.1" y="149" width="179.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="535.12" y="159.5" >&lt;alloc::string::String ..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (118,839,890 samples, 29.64%)</title><rect x="712.5" y="469" width="349.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="715.49" y="479.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__execvpe_common (127,439 samples, 0.03%)</title><rect x="230.8" y="421" width="0.4" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="233.81" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (127,439 samples, 0.03%)</title><rect x="230.8" y="373" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="233.81" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (99,452 samples, 0.02%)</title><rect x="10.0" y="469" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal (163,512,424 samples, 40.79%)</title><rect x="231.2" y="405" width="481.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="234.19" y="415.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>bprm_execve.part.0 (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="357" width="127.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1065.70" y="367.5" >bprm_execve.par..</text>
</g>
<g >
<title>ret_from_fork (135,913 samples, 0.03%)</title><rect x="1062.3" y="453" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1065.30" y="463.5" ></text>
</g>
<g >
<title>__execvpex (127,439 samples, 0.03%)</title><rect x="230.8" y="437" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="233.81" y="447.5" ></text>
</g>
<g >
<title>__libc_fork (118,998 samples, 0.03%)</title><rect x="531.8" y="213" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="534.77" y="223.5" ></text>
</g>
<g >
<title>native_write_msr (127,439 samples, 0.03%)</title><rect x="230.8" y="133" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="233.81" y="143.5" ></text>
</g>
<g >
<title>x64_sys_call (118,839,890 samples, 29.64%)</title><rect x="712.5" y="437" width="349.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="715.49" y="447.5" >x64_sys_call</text>
</g>
<g >
<title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (60,955,935 samples, 15.21%)</title><rect x="532.1" y="181" width="179.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="535.12" y="191.5" >&lt;&amp;mut W as core::fmt::W..</text>
</g>
<g >
<title>ret_from_fork (118,998 samples, 0.03%)</title><rect x="531.8" y="149" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="534.77" y="159.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (99,452 samples, 0.02%)</title><rect x="10.0" y="373" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>perf_event_exec (67,356,707 samples, 16.80%)</title><rect x="712.5" y="293" width="198.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="715.49" y="303.5" >perf_event_exec</text>
</g>
<g >
<title>x86_pmu_enable (97,888 samples, 0.02%)</title><rect x="1189.7" y="357" width="0.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1192.71" y="367.5" ></text>
</g>
<g >
<title>update_sg_wakeup_stats (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="293" width="127.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1065.70" y="303.5" >update_sg_wakeu..</text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (60,955,935 samples, 15.21%)</title><rect x="532.1" y="53" width="179.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="535.12" y="63.5" >__memcpy_avx_unaligned_..</text>
</g>
<g >
<title>elf_load (51,483,183 samples, 12.84%)</title><rect x="910.8" y="309" width="151.5" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="913.76" y="319.5" >elf_load</text>
</g>
<g >
<title>__perf_event_task_sched_in (319,715 samples, 0.08%)</title><rect x="711.5" y="101" width="1.0" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="714.55" y="111.5" ></text>
</g>
<g >
<title>bprm_execve (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="373" width="127.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1065.70" y="383.5" >bprm_execve</text>
</g>
<g >
<title>perf_ctx_enable (138,388 samples, 0.03%)</title><rect x="230.4" y="197" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="233.40" y="207.5" ></text>
</g>
<g >
<title>cmd_stat (138,388 samples, 0.03%)</title><rect x="230.4" y="453" width="0.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="233.40" y="463.5" ></text>
</g>
<g >
<title>load_elf_binary (99,452 samples, 0.02%)</title><rect x="10.0" y="325" width="0.3" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>x64_sys_call (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="421" width="127.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1065.70" y="431.5" >x64_sys_call</text>
</g>
<g >
<title>intel_pmu_enable_all (138,388 samples, 0.03%)</title><rect x="230.4" y="165" width="0.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="233.40" y="175.5" ></text>
</g>
<g >
<title>schedule (319,715 samples, 0.08%)</title><rect x="711.5" y="149" width="1.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="714.55" y="159.5" ></text>
</g>
<g >
<title>perf_event_exec (99,452 samples, 0.02%)</title><rect x="10.0" y="293" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_execve (99,452 samples, 0.02%)</title><rect x="10.0" y="421" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>__schedule (138,388 samples, 0.03%)</title><rect x="230.4" y="245" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="233.40" y="255.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (118,839,890 samples, 29.64%)</title><rect x="712.5" y="373" width="349.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="715.49" y="383.5" >bprm_execve.part.0</text>
</g>
<g >
<title>[unknown] (127,439 samples, 0.03%)</title><rect x="230.8" y="469" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="233.81" y="479.5" ></text>
</g>
<g >
<title>x86_pmu_enable (127,439 samples, 0.03%)</title><rect x="230.8" y="165" width="0.4" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="233.81" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (138,388 samples, 0.03%)</title><rect x="230.4" y="373" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="233.40" y="383.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (60,955,935 samples, 15.21%)</title><rect x="532.1" y="117" width="179.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="535.12" y="127.5" >alloc::vec::Vec&lt;T,A&gt;::e..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (118,998 samples, 0.03%)</title><rect x="531.8" y="117" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="534.77" y="127.5" ></text>
</g>
<g >
<title>std::panicking::try (163,512,424 samples, 40.79%)</title><rect x="231.2" y="373" width="481.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="234.19" y="383.5" >std::panicking::try</text>
</g>
<g >
<title>ret_from_fork_asm (118,998 samples, 0.03%)</title><rect x="531.8" y="165" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="534.77" y="175.5" ></text>
</g>
<g >
<title>core::fmt::Write::write_fmt (60,955,935 samples, 15.21%)</title><rect x="532.1" y="197" width="179.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="535.12" y="207.5" >core::fmt::Write::write..</text>
</g>
<g >
<title>bprm_execve (118,839,890 samples, 29.64%)</title><rect x="712.5" y="389" width="349.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="715.49" y="399.5" >bprm_execve</text>
</g>
<g >
<title>stop_one_cpu (127,439 samples, 0.03%)</title><rect x="230.8" y="261" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="233.81" y="271.5" ></text>
</g>
<g >
<title>selection_sort_perf::main (163,512,424 samples, 40.79%)</title><rect x="231.2" y="229" width="481.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="234.19" y="239.5" >selection_sort_perf::main</text>
</g>
<g >
<title>exec_binprm (99,452 samples, 0.02%)</title><rect x="10.0" y="357" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (127,439 samples, 0.03%)</title><rect x="230.8" y="293" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="233.81" y="303.5" ></text>
</g>
<g >
<title>__spawni_child (127,439 samples, 0.03%)</title><rect x="230.8" y="453" width="0.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="233.81" y="463.5" ></text>
</g>
<g >
<title>selection_sort_ (282,615,666 samples, 70.50%)</title><rect x="230.8" y="485" width="831.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="233.81" y="495.5" >selection_sort_</text>
</g>
<g >
<title>core::intrinsics::copy_nonoverlapping (60,955,935 samples, 15.21%)</title><rect x="532.1" y="69" width="179.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="535.12" y="79.5" >core::intrinsics::copy_..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (60,955,935 samples, 15.21%)</title><rect x="532.1" y="101" width="179.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="535.12" y="111.5" >&lt;alloc::vec::Vec&lt;T,A&gt; a..</text>
</g>
<g >
<title>std::panicking::try (163,512,424 samples, 40.79%)</title><rect x="231.2" y="309" width="481.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="234.19" y="319.5" >std::panicking::try</text>
</g>
<g >
<title>arch_fork (118,998 samples, 0.03%)</title><rect x="531.8" y="181" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="534.77" y="191.5" ></text>
</g>
<g >
<title>x64_sys_call (127,439 samples, 0.03%)</title><rect x="230.8" y="357" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="233.81" y="367.5" ></text>
</g>
<g >
<title>__schedule (127,439 samples, 0.03%)</title><rect x="230.8" y="229" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="233.81" y="239.5" ></text>
</g>
<g >
<title>__libc_start_call_main (163,512,424 samples, 40.79%)</title><rect x="231.2" y="437" width="481.3" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="234.19" y="447.5" >__libc_start_call_main</text>
</g>
<g >
<title>__GI__Fork (118,998 samples, 0.03%)</title><rect x="531.8" y="197" width="0.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="534.77" y="207.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (51,483,183 samples, 12.84%)</title><rect x="910.8" y="277" width="151.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="913.76" y="287.5" >vm_mmap_pgoff</text>
</g>
<g >
<title>search_binary_handler (99,452 samples, 0.02%)</title><rect x="10.0" y="341" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>sched_exec (127,439 samples, 0.03%)</title><rect x="230.8" y="277" width="0.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="233.81" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (127,439 samples, 0.03%)</title><rect x="230.8" y="389" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="233.81" y="399.5" ></text>
</g>
<g >
<title>__schedule (319,715 samples, 0.08%)</title><rect x="711.5" y="133" width="1.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="714.55" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (99,452 samples, 0.02%)</title><rect x="10.0" y="453" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (127,439 samples, 0.03%)</title><rect x="230.8" y="149" width="0.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="233.81" y="159.5" ></text>
</g>
<g >
<title>exec_binprm (118,839,890 samples, 29.64%)</title><rect x="712.5" y="357" width="349.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="715.49" y="367.5" >exec_binprm</text>
</g>
<g >
<title>std::panic::catch_unwind (163,512,424 samples, 40.79%)</title><rect x="231.2" y="325" width="481.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="234.19" y="335.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>bprm_execve (99,452 samples, 0.02%)</title><rect x="10.0" y="389" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (97,888 samples, 0.02%)</title><rect x="1189.7" y="389" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1192.71" y="399.5" ></text>
</g>
<g >
<title>mmap_region (51,483,183 samples, 12.84%)</title><rect x="910.8" y="245" width="151.5" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="913.76" y="255.5" >mmap_region</text>
</g>
<g >
<title>find_idlest_group (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="309" width="127.0" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="1065.70" y="319.5" >find_idlest_group</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (319,715 samples, 0.08%)</title><rect x="711.5" y="165" width="1.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="714.55" y="175.5" ></text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (163,512,424 samples, 40.79%)</title><rect x="231.2" y="277" width="481.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="234.19" y="287.5" >core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; ..</text>
</g>
<g >
<title>sched_exec (43,150,570 samples, 10.76%)</title><rect x="1062.7" y="341" width="127.0" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1065.70" y="351.5" >sched_exec</text>
</g>
<g >
<title>finish_task_switch.isra.0 (127,439 samples, 0.03%)</title><rect x="230.8" y="213" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="233.81" y="223.5" ></text>
</g>
<g >
<title>schedule_tail (118,998 samples, 0.03%)</title><rect x="531.8" y="133" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="534.77" y="143.5" ></text>
</g>
<g >
<title>do_sys_poll (138,388 samples, 0.03%)</title><rect x="230.4" y="325" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="233.40" y="335.5" ></text>
</g>
<g >
<title>perf_ctx_enable (127,439 samples, 0.03%)</title><rect x="230.8" y="181" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="233.81" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (138,388 samples, 0.03%)</title><rect x="230.4" y="389" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="233.40" y="399.5" ></text>
</g>
<g >
<title>ret_from_fork_asm (135,913 samples, 0.03%)</title><rect x="1062.3" y="469" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1065.30" y="479.5" ></text>
</g>
<g >
<title>perf_ctx_enable (99,452 samples, 0.02%)</title><rect x="10.0" y="245" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>vm_area_alloc (51,483,183 samples, 12.84%)</title><rect x="910.8" y="229" width="151.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="913.76" y="239.5" >vm_area_alloc</text>
</g>
</g>
</svg>
