<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="774.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="757" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="757" > </text>
<g id="frames">
<g >
<title>__perf_event_task_sched_in (215,448 samples, 0.02%)</title><rect x="1044.5" y="101" width="0.2" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1047.51" y="111.5" ></text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (753,275,160 samples, 64.27%)</title><rect x="286.3" y="437" width="758.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="289.29" y="447.5" >core::ops::function::FnOnce::call_once</text>
</g>
<g >
<title>__libc_start_main_impl (753,275,160 samples, 64.27%)</title><rect x="286.3" y="677" width="758.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="289.29" y="687.5" >__libc_start_main_impl</text>
</g>
<g >
<title>x86_pmu_enable (152,080 samples, 0.01%)</title><rect x="1189.6" y="597" width="0.1" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1192.58" y="607.5" ></text>
</g>
<g >
<title>native_write_msr (152,080 samples, 0.01%)</title><rect x="1189.6" y="565" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1192.58" y="575.5" ></text>
</g>
<g >
<title>perf (185,995,351 samples, 15.87%)</title><rect x="10.1" y="709" width="187.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="13.09" y="719.5" >perf</text>
</g>
<g >
<title>do_user_addr_fault (90,440,334 samples, 7.72%)</title><rect x="286.3" y="149" width="91.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="289.29" y="159.5" >do_user_ad..</text>
</g>
<g >
<title>vma_interval_tree_insert (159,291,994 samples, 13.59%)</title><rect x="37.0" y="405" width="160.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="39.97" y="415.5" >vma_interval_tree_in..</text>
</g>
<g >
<title>[unknown] (26,703,357 samples, 2.28%)</title><rect x="10.1" y="693" width="26.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.09" y="703.5" >[..</text>
</g>
<g >
<title>perf_ctx_enable (159,485 samples, 0.01%)</title><rect x="377.4" y="261" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="380.35" y="271.5" ></text>
</g>
<g >
<title>perf_ctx_enable (268,278 samples, 0.02%)</title><rect x="1189.7" y="597" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1192.73" y="607.5" ></text>
</g>
<g >
<title>selection_sort_perf::main (753,275,160 samples, 64.27%)</title><rect x="286.3" y="421" width="758.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="289.29" y="431.5" >selection_sort_perf::main</text>
</g>
<g >
<title>_start (753,275,160 samples, 64.27%)</title><rect x="286.3" y="693" width="758.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="289.29" y="703.5" >_start</text>
</g>
<g >
<title>bprm_execve (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="613" width="44.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1047.73" y="623.5" >bprm..</text>
</g>
<g >
<title>perf_ctx_enable (152,080 samples, 0.01%)</title><rect x="1189.6" y="613" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1192.58" y="623.5" ></text>
</g>
<g >
<title>__libc_fork (159,485 samples, 0.01%)</title><rect x="377.4" y="389" width="0.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="380.35" y="399.5" ></text>
</g>
<g >
<title>schedule (116,445 samples, 0.01%)</title><rect x="1044.4" y="309" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1047.39" y="319.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (159,291,994 samples, 13.59%)</title><rect x="37.0" y="453" width="160.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="39.97" y="463.5" >do_vmi_align_munmap</text>
</g>
<g >
<title>__perf_event_task_sched_in (152,080 samples, 0.01%)</title><rect x="1189.6" y="629" width="0.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1192.58" y="639.5" ></text>
</g>
<g >
<title>std::sys::unix::os::exit (215,448 samples, 0.02%)</title><rect x="1044.5" y="389" width="0.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1047.51" y="399.5" ></text>
</g>
<g >
<title>schedule (261,710 samples, 0.02%)</title><rect x="1044.1" y="293" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1047.13" y="303.5" ></text>
</g>
<g >
<title>dispatch_events (26,703,357 samples, 2.28%)</title><rect x="10.1" y="661" width="26.9" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="13.09" y="671.5" >d..</text>
</g>
<g >
<title>__x64_sys_execve (159,291,994 samples, 13.59%)</title><rect x="37.0" y="645" width="160.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="39.97" y="655.5" >__x64_sys_execve</text>
</g>
<g >
<title>finish_task_switch.isra.0 (116,445 samples, 0.01%)</title><rect x="1044.4" y="277" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1047.39" y="287.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (268,278 samples, 0.02%)</title><rect x="1189.7" y="613" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1192.73" y="623.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (753,275,160 samples, 64.27%)</title><rect x="286.3" y="565" width="758.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="289.29" y="575.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>__cxa_finalize (215,448 samples, 0.02%)</title><rect x="1044.5" y="309" width="0.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1047.51" y="319.5" ></text>
</g>
<g >
<title>do_filp_open (88,330,136 samples, 7.54%)</title><rect x="197.4" y="501" width="88.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="200.36" y="511.5" >do_filp_open</text>
</g>
<g >
<title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (604,122,706 samples, 51.55%)</title><rect x="436.1" y="373" width="608.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="439.13" y="383.5" >&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next</text>
</g>
<g >
<title>__GI___libc_malloc (90,440,334 samples, 7.72%)</title><rect x="286.3" y="213" width="91.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="289.29" y="223.5" >__GI___lib..</text>
</g>
<g >
<title>finish_task_switch.isra.0 (152,080 samples, 0.01%)</title><rect x="1189.6" y="645" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1192.58" y="655.5" ></text>
</g>
<g >
<title>sysvec_reschedule_ipi (116,445 samples, 0.01%)</title><rect x="1044.4" y="357" width="0.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1047.39" y="367.5" ></text>
</g>
<g >
<title>std::process::exit (215,448 samples, 0.02%)</title><rect x="1044.5" y="405" width="0.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1047.51" y="415.5" ></text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90,440,334 samples, 7.72%)</title><rect x="286.3" y="293" width="91.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="289.29" y="303.5" >alloc::raw..</text>
</g>
<g >
<title>inode_permission (26,637,353 samples, 2.27%)</title><rect x="10.1" y="469" width="26.8" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="13.09" y="479.5" >i..</text>
</g>
<g >
<title>__x64_sys_exit_group (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="645" width="100.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1091.84" y="655.5" >__x64_sys_ex..</text>
</g>
<g >
<title>std::rt::lang_start_internal (753,275,160 samples, 64.27%)</title><rect x="286.3" y="613" width="758.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="289.29" y="623.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>native_write_msr (159,485 samples, 0.01%)</title><rect x="377.4" y="213" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="380.35" y="223.5" ></text>
</g>
<g >
<title>bprm_execve (159,291,994 samples, 13.59%)</title><rect x="37.0" y="613" width="160.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="39.97" y="623.5" >bprm_execve</text>
</g>
<g >
<title>_int_malloc (90,440,334 samples, 7.72%)</title><rect x="286.3" y="197" width="91.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="289.29" y="207.5" >_int_malloc</text>
</g>
<g >
<title>free_pgtables (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="533" width="100.8" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1091.84" y="543.5" >free_pgtables</text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (116,445 samples, 0.01%)</title><rect x="1044.4" y="373" width="0.1" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1047.39" y="383.5" ></text>
</g>
<g >
<title>ret_from_fork (159,485 samples, 0.01%)</title><rect x="377.4" y="325" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="380.35" y="335.5" ></text>
</g>
<g >
<title>__run_exit_handlers (215,448 samples, 0.02%)</title><rect x="1044.5" y="357" width="0.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1047.51" y="367.5" ></text>
</g>
<g >
<title>__GI__Fork (159,485 samples, 0.01%)</title><rect x="377.4" y="373" width="0.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="380.35" y="383.5" ></text>
</g>
<g >
<title>elf_load (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="533" width="44.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1047.73" y="543.5" >elf_..</text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (753,275,160 samples, 64.27%)</title><rect x="286.3" y="485" width="758.4" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="289.29" y="495.5" >core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text>
</g>
<g >
<title>sh (268,278 samples, 0.02%)</title><rect x="1189.7" y="709" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1192.73" y="719.5" ></text>
</g>
<g >
<title>schedule_tail (268,278 samples, 0.02%)</title><rect x="1189.7" y="645" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.73" y="655.5" ></text>
</g>
<g >
<title>__x64_sys_execve (88,330,136 samples, 7.54%)</title><rect x="197.4" y="565" width="88.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="200.36" y="575.5" >__x64_sys_..</text>
</g>
<g >
<title>x64_sys_call (88,330,136 samples, 7.54%)</title><rect x="197.4" y="581" width="88.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="200.36" y="591.5" >x64_sys_call</text>
</g>
<g >
<title>__perf_event_task_sched_in (116,445 samples, 0.01%)</title><rect x="1044.4" y="261" width="0.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1047.39" y="271.5" ></text>
</g>
<g >
<title>native_write_msr (116,445 samples, 0.01%)</title><rect x="1044.4" y="197" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1047.39" y="207.5" ></text>
</g>
<g >
<title>sysvec_reschedule_ipi (261,710 samples, 0.02%)</title><rect x="1044.1" y="341" width="0.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1047.13" y="351.5" ></text>
</g>
<g >
<title>perf_ctx_enable (261,710 samples, 0.02%)</title><rect x="1044.1" y="229" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1047.13" y="239.5" ></text>
</g>
<g >
<title>wp_page_copy (215,448 samples, 0.02%)</title><rect x="1044.5" y="165" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1047.51" y="175.5" ></text>
</g>
<g >
<title>exc_page_fault (90,440,334 samples, 7.72%)</title><rect x="286.3" y="165" width="91.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="289.29" y="175.5" >exc_page_f..</text>
</g>
<g >
<title>alloc_bprm (88,330,136 samples, 7.54%)</title><rect x="197.4" y="533" width="88.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="200.36" y="543.5" >alloc_bprm</text>
</g>
<g >
<title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90,440,334 samples, 7.72%)</title><rect x="286.3" y="277" width="91.1" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="289.29" y="287.5" >alloc::raw..</text>
</g>
<g >
<title>handle_mm_fault (90,440,334 samples, 7.72%)</title><rect x="286.3" y="133" width="91.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="289.29" y="143.5" >handle_mm_..</text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (261,710 samples, 0.02%)</title><rect x="1044.1" y="357" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="1047.13" y="367.5" ></text>
</g>
<g >
<title>__schedule (116,445 samples, 0.01%)</title><rect x="1044.4" y="293" width="0.1" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1047.39" y="303.5" ></text>
</g>
<g >
<title>__libc_start_call_main (753,275,160 samples, 64.27%)</title><rect x="286.3" y="661" width="758.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="289.29" y="671.5" >__libc_start_call_main</text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (753,275,160 samples, 64.27%)</title><rect x="286.3" y="453" width="758.4" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="289.29" y="463.5" >std::sys_common::backtrace::__rust_begin_short_backtrace</text>
</g>
<g >
<title>intel_pmu_enable_all (261,710 samples, 0.02%)</title><rect x="1044.1" y="197" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1047.13" y="207.5" ></text>
</g>
<g >
<title>__mmput (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="565" width="100.8" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1091.84" y="575.5" >__mmput</text>
</g>
<g >
<title>handle_pte_fault (215,448 samples, 0.02%)</title><rect x="1044.5" y="197" width="0.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1047.51" y="207.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (90,440,334 samples, 7.72%)</title><rect x="286.3" y="181" width="91.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="289.29" y="191.5" >asm_exc_pa..</text>
</g>
<g >
<title>schedule_tail (159,485 samples, 0.01%)</title><rect x="377.4" y="309" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="380.35" y="319.5" ></text>
</g>
<g >
<title>__GI_exit (215,448 samples, 0.02%)</title><rect x="1044.5" y="373" width="0.2" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="1047.51" y="383.5" ></text>
</g>
<g >
<title>x64_sys_call (143,863,388 samples, 12.28%)</title><rect x="1044.7" y="661" width="144.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1047.73" y="671.5" >x64_sys_call</text>
</g>
<g >
<title>cmd_stat (26,703,357 samples, 2.28%)</title><rect x="10.1" y="677" width="26.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="13.09" y="687.5" >c..</text>
</g>
<g >
<title>path_lookupat (26,637,353 samples, 2.27%)</title><rect x="10.1" y="501" width="26.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="13.09" y="511.5" >p..</text>
</g>
<g >
<title>do_syscall_64 (143,863,388 samples, 12.28%)</title><rect x="1044.7" y="677" width="144.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1047.73" y="687.5" >do_syscall_64</text>
</g>
<g >
<title>__vm_munmap (159,291,994 samples, 13.59%)</title><rect x="37.0" y="485" width="160.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="39.97" y="495.5" >__vm_munmap</text>
</g>
<g >
<title>__handle_mm_fault (215,448 samples, 0.02%)</title><rect x="1044.5" y="213" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1047.51" y="223.5" ></text>
</g>
<g >
<title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (90,440,334 samples, 7.72%)</title><rect x="286.3" y="309" width="91.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="289.29" y="319.5" >alloc::vec..</text>
</g>
<g >
<title>exc_page_fault (215,448 samples, 0.02%)</title><rect x="1044.5" y="261" width="0.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1047.51" y="271.5" ></text>
</g>
<g >
<title>exit_mmap (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="549" width="100.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1091.84" y="559.5" >exit_mmap</text>
</g>
<g >
<title>asm_exc_page_fault (215,448 samples, 0.02%)</title><rect x="1044.5" y="277" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1047.51" y="287.5" ></text>
</g>
<g >
<title>irqentry_exit (261,710 samples, 0.02%)</title><rect x="1044.1" y="325" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1047.13" y="335.5" ></text>
</g>
<g >
<title>mmput (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="581" width="100.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1091.84" y="591.5" >mmput</text>
</g>
<g >
<title>alloc::vec::Vec&lt;T&gt;::with_capacity (90,440,334 samples, 7.72%)</title><rect x="286.3" y="325" width="91.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="289.29" y="335.5" >alloc::vec..</text>
</g>
<g >
<title>_dl_fini (215,448 samples, 0.02%)</title><rect x="1044.5" y="341" width="0.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1047.51" y="351.5" ></text>
</g>
<g >
<title>folio_put (90,440,334 samples, 7.72%)</title><rect x="286.3" y="69" width="91.1" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="289.29" y="79.5" >folio_put</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (143,863,388 samples, 12.28%)</title><rect x="1044.7" y="693" width="144.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1047.73" y="703.5" >entry_SYSCALL_64_a..</text>
</g>
<g >
<title>__perf_event_task_sched_in (159,485 samples, 0.01%)</title><rect x="377.4" y="277" width="0.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="380.35" y="287.5" ></text>
</g>
<g >
<title>x86_pmu_enable (261,710 samples, 0.02%)</title><rect x="1044.1" y="213" width="0.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1047.13" y="223.5" ></text>
</g>
<g >
<title>ret_from_fork_asm (159,485 samples, 0.01%)</title><rect x="377.4" y="341" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="380.35" y="351.5" ></text>
</g>
<g >
<title>native_write_msr (215,448 samples, 0.02%)</title><rect x="1044.5" y="37" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1047.51" y="47.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h6e901a66b8cf246f (753,275,160 samples, 64.27%)</title><rect x="286.3" y="549" width="758.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="289.29" y="559.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h6e901a66b8cf246f</text>
</g>
<g >
<title>[unknown] (88,330,136 samples, 7.54%)</title><rect x="197.4" y="693" width="88.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="200.36" y="703.5" >[unknown]</text>
</g>
<g >
<title>alloc_empty_file (88,330,136 samples, 7.54%)</title><rect x="197.4" y="469" width="88.9" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="200.36" y="479.5" >alloc_empt..</text>
</g>
<g >
<title>vm_mmap (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="517" width="44.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1047.73" y="527.5" >vm_m..</text>
</g>
<g >
<title>__x64_sys_execve (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="645" width="44.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1047.73" y="655.5" >__x6..</text>
</g>
<g >
<title>__unregister_atfork (215,448 samples, 0.02%)</title><rect x="1044.5" y="293" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1047.51" y="303.5" ></text>
</g>
<g >
<title>selection_sort_ (985,620,764 samples, 84.10%)</title><rect x="197.4" y="709" width="992.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="200.36" y="719.5" >selection_sort_</text>
</g>
<g >
<title>__schedule (215,448 samples, 0.02%)</title><rect x="1044.5" y="133" width="0.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1047.51" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (159,291,994 samples, 13.59%)</title><rect x="37.0" y="677" width="160.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="39.97" y="687.5" >do_syscall_64</text>
</g>
<g >
<title>generic_permission (26,637,353 samples, 2.27%)</title><rect x="10.1" y="453" width="26.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="13.09" y="463.5" >g..</text>
</g>
<g >
<title>__perf_event_task_sched_in (261,710 samples, 0.02%)</title><rect x="1044.1" y="245" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1047.13" y="255.5" ></text>
</g>
<g >
<title>do_vmi_munmap (159,291,994 samples, 13.59%)</title><rect x="37.0" y="469" width="160.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="39.97" y="479.5" >do_vmi_munmap</text>
</g>
<g >
<title>finish_task_switch.isra.0 (261,710 samples, 0.02%)</title><rect x="1044.1" y="261" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1047.13" y="271.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (159,291,994 samples, 13.59%)</title><rect x="37.0" y="597" width="160.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="39.97" y="607.5" >bprm_execve.part.0</text>
</g>
<g >
<title>__libc_vfork (268,278 samples, 0.02%)</title><rect x="1189.7" y="693" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.73" y="703.5" ></text>
</g>
<g >
<title>__split_vma (159,291,994 samples, 13.59%)</title><rect x="37.0" y="437" width="160.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="39.97" y="447.5" >__split_vma</text>
</g>
<g >
<title>perf_iterate_ctx (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="437" width="44.1" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1047.73" y="447.5" >perf..</text>
</g>
<g >
<title>irqentry_exit (116,445 samples, 0.01%)</title><rect x="1044.4" y="341" width="0.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1047.39" y="351.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (215,448 samples, 0.02%)</title><rect x="1044.5" y="53" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1047.51" y="63.5" ></text>
</g>
<g >
<title>schedule_tail (152,080 samples, 0.01%)</title><rect x="1189.6" y="661" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.58" y="671.5" ></text>
</g>
<g >
<title>nix::unistd::fork (159,485 samples, 0.01%)</title><rect x="377.4" y="405" width="0.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="380.35" y="415.5" ></text>
</g>
<g >
<title>do_group_exit (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="629" width="100.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1091.84" y="639.5" >do_group_exit</text>
</g>
<g >
<title>ret_from_fork_asm (268,278 samples, 0.02%)</title><rect x="1189.7" y="677" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1192.73" y="687.5" ></text>
</g>
<g >
<title>mmap_region (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="469" width="44.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1047.73" y="479.5" >mmap..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (26,637,353 samples, 2.27%)</title><rect x="10.1" y="629" width="26.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.09" y="639.5" >e..</text>
</g>
<g >
<title>__handle_mm_fault (90,440,334 samples, 7.72%)</title><rect x="286.3" y="117" width="91.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="289.29" y="127.5" >__handle_m..</text>
</g>
<g >
<title>__spawni_child (88,330,136 samples, 7.54%)</title><rect x="197.4" y="677" width="88.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="200.36" y="687.5" >__spawni_c..</text>
</g>
<g >
<title>native_write_msr (268,278 samples, 0.02%)</title><rect x="1189.7" y="549" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1192.73" y="559.5" ></text>
</g>
<g >
<title>__do_sys_newfstatat (26,637,353 samples, 2.27%)</title><rect x="10.1" y="565" width="26.8" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="13.09" y="575.5" >_..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (88,330,136 samples, 7.54%)</title><rect x="197.4" y="613" width="88.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="200.36" y="623.5" >entry_SYSC..</text>
</g>
<g >
<title>load_elf_interp.constprop.0 (159,291,994 samples, 13.59%)</title><rect x="37.0" y="533" width="160.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="39.97" y="543.5" >load_elf_interp.cons..</text>
</g>
<g >
<title>__perf_addr_filters_adjust (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="421" width="44.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1047.73" y="431.5" >__pe..</text>
</g>
<g >
<title>exit_mm (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="597" width="100.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1091.84" y="607.5" >exit_mm</text>
</g>
<g >
<title>alloc::string::String::with_capacity (90,440,334 samples, 7.72%)</title><rect x="286.3" y="341" width="91.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="289.29" y="351.5" >alloc::str..</text>
</g>
<g >
<title>vma_complete (159,291,994 samples, 13.59%)</title><rect x="37.0" y="421" width="160.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="39.97" y="431.5" >vma_complete</text>
</g>
<g >
<title>__GI_execve (88,330,136 samples, 7.54%)</title><rect x="197.4" y="629" width="88.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="200.36" y="639.5" >__GI_execve</text>
</g>
<g >
<title>intel_pmu_enable_all (268,278 samples, 0.02%)</title><rect x="1189.7" y="565" width="0.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1192.73" y="575.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (159,291,994 samples, 13.59%)</title><rect x="37.0" y="629" width="160.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="39.97" y="639.5" >do_execveat_common.i..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (159,291,994 samples, 13.59%)</title><rect x="37.0" y="693" width="160.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="39.97" y="703.5" >entry_SYSCALL_64_aft..</text>
</g>
<g >
<title>elf_load (159,291,994 samples, 13.59%)</title><rect x="37.0" y="517" width="160.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="39.97" y="527.5" >elf_load</text>
</g>
<g >
<title>alloc::fmt::format (90,440,334 samples, 7.72%)</title><rect x="286.3" y="405" width="91.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="289.29" y="415.5" >alloc::fmt..</text>
</g>
<g >
<title>std::panic::catch_unwind (753,275,160 samples, 64.27%)</title><rect x="286.3" y="597" width="758.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="289.29" y="607.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>perf_ctx_enable (215,448 samples, 0.02%)</title><rect x="1044.5" y="85" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1047.51" y="95.5" ></text>
</g>
<g >
<title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90,440,334 samples, 7.72%)</title><rect x="286.3" y="261" width="91.1" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="289.29" y="271.5" >&lt;alloc::al..</text>
</g>
<g >
<title>x86_pmu_enable (268,278 samples, 0.02%)</title><rect x="1189.7" y="581" width="0.3" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1192.73" y="591.5" ></text>
</g>
<g >
<title>arch_fork (159,485 samples, 0.01%)</title><rect x="377.4" y="357" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="380.35" y="367.5" ></text>
</g>
<g >
<title>x86_pmu_enable (159,485 samples, 0.01%)</title><rect x="377.4" y="245" width="0.1" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="380.35" y="255.5" ></text>
</g>
<g >
<title>__memset (88,330,136 samples, 7.54%)</title><rect x="197.4" y="453" width="88.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="200.36" y="463.5" >__memset</text>
</g>
<g >
<title>std::panicking::try (753,275,160 samples, 64.27%)</title><rect x="286.3" y="581" width="758.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="289.29" y="591.5" >std::panicking::try</text>
</g>
<g >
<title>ret_from_fork (152,080 samples, 0.01%)</title><rect x="1189.6" y="677" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1192.58" y="687.5" ></text>
</g>
<g >
<title>main (753,275,160 samples, 64.27%)</title><rect x="286.3" y="645" width="758.4" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="289.29" y="655.5" >main</text>
</g>
<g >
<title>selection_sort_perf::selection_sort (662,459,893 samples, 56.53%)</title><rect x="377.5" y="405" width="667.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="380.51" y="415.5" >selection_sort_perf::selection_sort</text>
</g>
<g >
<title>do_mmap (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="485" width="44.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1047.73" y="495.5" >do_m..</text>
</g>
<g >
<title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (604,239,151 samples, 51.56%)</title><rect x="436.1" y="389" width="608.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="439.13" y="399.5" >core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::rang..</text>
</g>
<g >
<title>load_elf_binary (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="549" width="44.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1047.73" y="559.5" >load..</text>
</g>
<g >
<title>std::rt::lang_start (753,275,160 samples, 64.27%)</title><rect x="286.3" y="629" width="758.4" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="289.29" y="639.5" >std::rt::lang_start</text>
</g>
<g >
<title>__do_global_dtors_aux (215,448 samples, 0.02%)</title><rect x="1044.5" y="325" width="0.2" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="1047.51" y="335.5" ></text>
</g>
<g >
<title>alloc::fmt::format::_$u7b$$u7b$closure$u7d$$u7d$::hecd766d936ff5b21 (90,440,334 samples, 7.72%)</title><rect x="286.3" y="373" width="91.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="289.29" y="383.5" >alloc::fmt..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="629" width="44.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1047.73" y="639.5" >do_e..</text>
</g>
<g >
<title>alloc::fmt::format::format_inner (90,440,334 samples, 7.72%)</title><rect x="286.3" y="357" width="91.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="289.29" y="367.5" >alloc::fmt..</text>
</g>
<g >
<title>std::panic::catch_unwind (753,275,160 samples, 64.27%)</title><rect x="286.3" y="533" width="758.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="289.29" y="543.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>perf_event_mmap (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="453" width="44.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1047.73" y="463.5" >perf..</text>
</g>
<g >
<title>__execvpe_common (88,330,136 samples, 7.54%)</title><rect x="197.4" y="645" width="88.9" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="200.36" y="655.5" >__execvpe_..</text>
</g>
<g >
<title>do_execveat_common.isra.0 (88,330,136 samples, 7.54%)</title><rect x="197.4" y="549" width="88.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="200.36" y="559.5" >do_execvea..</text>
</g>
<g >
<title>all (1,171,970,027 samples, 100%)</title><rect x="10.0" y="725" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="735.5" ></text>
</g>
<g >
<title>__GI___fstatat64 (26,637,353 samples, 2.27%)</title><rect x="10.1" y="645" width="26.8" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="13.09" y="655.5" >_..</text>
</g>
<g >
<title>vfs_fstatat (26,637,353 samples, 2.27%)</title><rect x="10.1" y="549" width="26.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="13.09" y="559.5" >v..</text>
</g>
<g >
<title>x64_sys_call (159,291,994 samples, 13.59%)</title><rect x="37.0" y="661" width="160.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="39.97" y="671.5" >x64_sys_call</text>
</g>
<g >
<title>native_write_msr (261,710 samples, 0.02%)</title><rect x="1044.1" y="181" width="0.3" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1047.13" y="191.5" ></text>
</g>
<g >
<title>__cond_resched (215,448 samples, 0.02%)</title><rect x="1044.5" y="149" width="0.2" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1047.51" y="159.5" ></text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hdc85a1b631d93ebd (753,275,160 samples, 64.27%)</title><rect x="286.3" y="469" width="758.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="289.29" y="479.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::hdc85a1b631d93ebd</text>
</g>
<g >
<title>vm_munmap (159,291,994 samples, 13.59%)</title><rect x="37.0" y="501" width="160.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="39.97" y="511.5" >vm_munmap</text>
</g>
<g >
<title>perf_ctx_enable (116,445 samples, 0.01%)</title><rect x="1044.4" y="245" width="0.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1047.39" y="255.5" ></text>
</g>
<g >
<title>__schedule (261,710 samples, 0.02%)</title><rect x="1044.1" y="277" width="0.3" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1047.13" y="287.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (261,710 samples, 0.02%)</title><rect x="1044.1" y="309" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1047.13" y="319.5" ></text>
</g>
<g >
<title>x86_pmu_enable (215,448 samples, 0.02%)</title><rect x="1044.5" y="69" width="0.2" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1047.51" y="79.5" ></text>
</g>
<g >
<title>mas_find (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="517" width="100.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1091.84" y="527.5" >mas_find</text>
</g>
<g >
<title>x64_sys_call (26,637,353 samples, 2.27%)</title><rect x="10.1" y="597" width="26.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.09" y="607.5" >x..</text>
</g>
<g >
<title>load_elf_binary (159,291,994 samples, 13.59%)</title><rect x="37.0" y="549" width="160.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="39.97" y="559.5" >load_elf_binary</text>
</g>
<g >
<title>do_wp_page (215,448 samples, 0.02%)</title><rect x="1044.5" y="181" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1047.51" y="191.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (152,080 samples, 0.01%)</title><rect x="1189.6" y="581" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1192.58" y="591.5" ></text>
</g>
<g >
<title>handle_mm_fault (215,448 samples, 0.02%)</title><rect x="1044.5" y="229" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1047.51" y="239.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (116,445 samples, 0.01%)</title><rect x="1044.4" y="213" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1047.39" y="223.5" ></text>
</g>
<g >
<title>alloc::alloc::alloc (90,440,334 samples, 7.72%)</title><rect x="286.3" y="229" width="91.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="289.29" y="239.5" >alloc::all..</text>
</g>
<g >
<title>ret_from_fork (268,278 samples, 0.02%)</title><rect x="1189.7" y="661" width="0.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1192.73" y="671.5" ></text>
</g>
<g >
<title>do_open_execat (88,330,136 samples, 7.54%)</title><rect x="197.4" y="517" width="88.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="200.36" y="527.5" >do_open_ex..</text>
</g>
<g >
<title>filename_lookup (26,637,353 samples, 2.27%)</title><rect x="10.1" y="517" width="26.8" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="13.09" y="527.5" >f..</text>
</g>
<g >
<title>search_binary_handler (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="565" width="44.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1047.73" y="575.5" >sear..</text>
</g>
<g >
<title>exec_binprm (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="581" width="44.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1047.73" y="591.5" >exec..</text>
</g>
<g >
<title>intel_pmu_enable_all (159,485 samples, 0.01%)</title><rect x="377.4" y="229" width="0.1" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="380.35" y="239.5" ></text>
</g>
<g >
<title>mas_next_slot (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="501" width="100.8" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="1091.84" y="511.5" >mas_next_slot</text>
</g>
<g >
<title>bprm_execve.part.0 (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="597" width="44.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1047.73" y="607.5" >bprm..</text>
</g>
<g >
<title>handle_pte_fault (90,440,334 samples, 7.72%)</title><rect x="286.3" y="101" width="91.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="289.29" y="111.5" >handle_pte..</text>
</g>
<g >
<title>do_wp_page (90,440,334 samples, 7.72%)</title><rect x="286.3" y="85" width="91.1" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="289.29" y="95.5" >do_wp_page</text>
</g>
<g >
<title>ret_from_fork_asm (152,080 samples, 0.01%)</title><rect x="1189.6" y="693" width="0.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1192.58" y="703.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (753,275,160 samples, 64.27%)</title><rect x="286.3" y="501" width="758.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="289.29" y="511.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>core::option::Option&lt;T&gt;::map_or_else (90,440,334 samples, 7.72%)</title><rect x="286.3" y="389" width="91.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="289.29" y="399.5" >core::opti..</text>
</g>
<g >
<title>do_syscall_64 (88,330,136 samples, 7.54%)</title><rect x="197.4" y="597" width="88.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="200.36" y="607.5" >do_syscall..</text>
</g>
<g >
<title>vm_mmap_pgoff (43,811,185 samples, 3.74%)</title><rect x="1044.7" y="501" width="44.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1047.73" y="511.5" >vm_m..</text>
</g>
<g >
<title>do_user_addr_fault (215,448 samples, 0.02%)</title><rect x="1044.5" y="245" width="0.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1047.51" y="255.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (159,485 samples, 0.01%)</title><rect x="377.4" y="293" width="0.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="380.35" y="303.5" ></text>
</g>
<g >
<title>path_openat (88,330,136 samples, 7.54%)</title><rect x="197.4" y="485" width="88.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="200.36" y="495.5" >path_openat</text>
</g>
<g >
<title>finish_task_switch.isra.0 (268,278 samples, 0.02%)</title><rect x="1189.7" y="629" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1192.73" y="639.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (215,448 samples, 0.02%)</title><rect x="1044.5" y="117" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1047.51" y="127.5" ></text>
</g>
<g >
<title>alloc::alloc::Global::alloc_impl (90,440,334 samples, 7.72%)</title><rect x="286.3" y="245" width="91.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="289.29" y="255.5" >alloc::all..</text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (26,637,353 samples, 2.27%)</title><rect x="10.1" y="485" width="26.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="13.09" y="495.5" >l..</text>
</g>
<g >
<title>vfs_statx (26,637,353 samples, 2.27%)</title><rect x="10.1" y="533" width="26.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="13.09" y="543.5" >v..</text>
</g>
<g >
<title>search_binary_handler (159,291,994 samples, 13.59%)</title><rect x="37.0" y="565" width="160.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="39.97" y="575.5" >search_binary_handler</text>
</g>
<g >
<title>std::panicking::try (753,275,160 samples, 64.27%)</title><rect x="286.3" y="517" width="758.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="289.29" y="527.5" >std::panicking::try</text>
</g>
<g >
<title>do_exit (100,052,203 samples, 8.54%)</title><rect x="1088.8" y="613" width="100.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1091.84" y="623.5" >do_exit</text>
</g>
<g >
<title>exec_binprm (159,291,994 samples, 13.59%)</title><rect x="37.0" y="581" width="160.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="39.97" y="591.5" >exec_binprm</text>
</g>
<g >
<title>do_syscall_64 (26,637,353 samples, 2.27%)</title><rect x="10.1" y="613" width="26.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.09" y="623.5" >d..</text>
</g>
<g >
<title>x86_pmu_enable (116,445 samples, 0.01%)</title><rect x="1044.4" y="229" width="0.1" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1047.39" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_newfstatat (26,637,353 samples, 2.27%)</title><rect x="10.1" y="581" width="26.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="13.09" y="591.5" >_..</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (116,445 samples, 0.01%)</title><rect x="1044.4" y="325" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1047.39" y="335.5" ></text>
</g>
<g >
<title>__execvpex (88,330,136 samples, 7.54%)</title><rect x="197.4" y="661" width="88.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="200.36" y="671.5" >__execvpex</text>
</g>
</g>
</svg>
