<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="598.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="581" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="581" > </text>
<g id="frames">
<g >
<title>get_user_pages_remote (38,504,700 samples, 17.58%)</title><rect x="982.1" y="229" width="207.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="985.08" y="239.5" >get_user_pages_remote</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (90,391,831 samples, 41.27%)</title><rect x="10.0" y="437" width="486.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>do_execveat_common.isra.0 (38,504,700 samples, 17.58%)</title><rect x="982.1" y="277" width="207.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="985.08" y="287.5" >do_execveat_common.isra.0</text>
</g>
<g >
<title>__alloc_pages (38,504,700 samples, 17.58%)</title><rect x="982.1" y="85" width="207.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="985.08" y="95.5" >__alloc_pages</text>
</g>
<g >
<title>do_mmap (45,697,349 samples, 20.86%)</title><rect x="734.6" y="309" width="246.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="737.56" y="319.5" >do_mmap</text>
</g>
<g >
<title>handle_mm_fault (38,504,700 samples, 17.58%)</title><rect x="982.1" y="197" width="207.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="985.08" y="207.5" >handle_mm_fault</text>
</g>
<g >
<title>std::panic::catch_unwind (44,107,476 samples, 20.14%)</title><rect x="496.9" y="421" width="237.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="499.95" y="431.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>arch_fork (93,987 samples, 0.04%)</title><rect x="497.5" y="181" width="0.5" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="500.45" y="191.5" ></text>
</g>
<g >
<title>x64_sys_call (90,391,831 samples, 41.27%)</title><rect x="10.0" y="405" width="486.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >x64_sys_call</text>
</g>
<g >
<title>__libc_fork (93,987 samples, 0.04%)</title><rect x="497.5" y="213" width="0.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="500.45" y="223.5" ></text>
</g>
<g >
<title>binary_search_perf::main (44,107,476 samples, 20.14%)</title><rect x="496.9" y="245" width="237.7" height="15.0" fill="rgb(209,20,5)" rx="2" ry="2" />
<text  x="499.95" y="255.5" >binary_search_perf::main</text>
</g>
<g >
<title>sysvec_reschedule_ipi (93,854 samples, 0.04%)</title><rect x="496.9" y="197" width="0.6" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="499.95" y="207.5" ></text>
</g>
<g >
<title>exec_binprm (45,697,349 samples, 20.86%)</title><rect x="734.6" y="405" width="246.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="737.56" y="415.5" >exec_binprm</text>
</g>
<g >
<title>x86_pmu_enable (160,856 samples, 0.07%)</title><rect x="980.7" y="421" width="0.9" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="983.73" y="431.5" ></text>
</g>
<g >
<title>schedule (93,854 samples, 0.04%)</title><rect x="496.9" y="149" width="0.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="499.95" y="159.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (93,987 samples, 0.04%)</title><rect x="497.5" y="53" width="0.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="500.45" y="63.5" ></text>
</g>
<g >
<title>get_page_from_freelist (38,504,700 samples, 17.58%)</title><rect x="982.1" y="69" width="207.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="985.08" y="79.5" >get_page_from_freelist</text>
</g>
<g >
<title>ret_from_fork_asm (92,065 samples, 0.04%)</title><rect x="1189.5" y="373" width="0.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1192.50" y="383.5" ></text>
</g>
<g >
<title>[dash] (38,504,700 samples, 17.58%)</title><rect x="982.1" y="389" width="207.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="985.08" y="399.5" >[dash]</text>
</g>
<g >
<title>ret_from_fork_asm (93,987 samples, 0.04%)</title><rect x="497.5" y="165" width="0.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="500.45" y="175.5" ></text>
</g>
<g >
<title>x86_pmu_enable (92,065 samples, 0.04%)</title><rect x="1189.5" y="277" width="0.5" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1192.50" y="287.5" ></text>
</g>
<g >
<title>binary_search_p (180,357,512 samples, 82.34%)</title><rect x="10.0" y="533" width="971.6" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >binary_search_p</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (88,276 samples, 0.04%)</title><rect x="981.6" y="517" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="984.60" y="527.5" ></text>
</g>
<g >
<title>x64_sys_call (45,697,349 samples, 20.86%)</title><rect x="734.6" y="485" width="246.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="737.56" y="495.5" >x64_sys_call</text>
</g>
<g >
<title>perf_ctx_enable (93,987 samples, 0.04%)</title><rect x="497.5" y="85" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="500.45" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_execve (38,504,700 samples, 17.58%)</title><rect x="982.1" y="293" width="207.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="985.08" y="303.5" >__x64_sys_execve</text>
</g>
<g >
<title>__get_user_pages (38,504,700 samples, 17.58%)</title><rect x="982.1" y="213" width="207.4" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="985.08" y="223.5" >__get_user_pages</text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::h6e901a66b8cf246f (44,107,476 samples, 20.14%)</title><rect x="496.9" y="373" width="237.7" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="499.95" y="383.5" >std::rt::lang_start_internal::_..</text>
</g>
<g >
<title>alloc_bprm (90,391,831 samples, 41.27%)</title><rect x="10.0" y="357" width="486.9" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >alloc_bprm</text>
</g>
<g >
<title>__x64_sys_execve (88,276 samples, 0.04%)</title><rect x="981.6" y="469" width="0.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="984.60" y="479.5" ></text>
</g>
<g >
<title>perf_event_exec (88,276 samples, 0.04%)</title><rect x="981.6" y="341" width="0.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="984.60" y="351.5" ></text>
</g>
<g >
<title>do_user_addr_fault (43,919,635 samples, 20.05%)</title><rect x="498.0" y="149" width="236.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="500.96" y="159.5" >do_user_addr_fault</text>
</g>
<g >
<title>handle_pte_fault (38,504,700 samples, 17.58%)</title><rect x="982.1" y="165" width="207.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="985.08" y="175.5" >handle_pte_fault</text>
</g>
<g >
<title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (44,107,476 samples, 20.14%)</title><rect x="496.9" y="309" width="237.7" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="499.95" y="319.5" >core::ops::function::impls::&lt;im..</text>
</g>
<g >
<title>__spawni_child (90,391,831 samples, 41.27%)</title><rect x="10.0" y="501" width="486.9" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >__spawni_child</text>
</g>
<g >
<title>core::ops::function::FnOnce::call_once (44,107,476 samples, 20.14%)</title><rect x="496.9" y="261" width="237.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="499.95" y="271.5" >core::ops::function::FnOnce::ca..</text>
</g>
<g >
<title>vma_alloc_folio (38,504,700 samples, 17.58%)</title><rect x="982.1" y="117" width="207.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="985.08" y="127.5" >vma_alloc_folio</text>
</g>
<g >
<title>next_uptodate_folio (43,919,635 samples, 20.05%)</title><rect x="498.0" y="37" width="236.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="500.96" y="47.5" >next_uptodate_folio</text>
</g>
<g >
<title>vm_mmap_pgoff (45,697,349 samples, 20.86%)</title><rect x="734.6" y="325" width="246.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="737.56" y="335.5" >vm_mmap_pgoff</text>
</g>
<g >
<title>do_open_execat (90,391,831 samples, 41.27%)</title><rect x="10.0" y="341" width="486.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >do_open_execat</text>
</g>
<g >
<title>x86_pmu_enable (93,854 samples, 0.04%)</title><rect x="496.9" y="69" width="0.6" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="499.95" y="79.5" ></text>
</g>
<g >
<title>std::rt::lang_start_internal (44,107,476 samples, 20.14%)</title><rect x="496.9" y="437" width="237.7" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="499.95" y="447.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>do_syscall_64 (38,504,700 samples, 17.58%)</title><rect x="982.1" y="325" width="207.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="985.08" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>[dash] (38,596,765 samples, 17.62%)</title><rect x="982.1" y="517" width="207.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="985.08" y="527.5" >[dash]</text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (90,391,831 samples, 41.27%)</title><rect x="10.0" y="293" width="486.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >link_path_walk.part.0.constprop.0</text>
</g>
<g >
<title>do_execveat_common.isra.0 (88,276 samples, 0.04%)</title><rect x="981.6" y="453" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="984.60" y="463.5" ></text>
</g>
<g >
<title>std::panicking::try (44,107,476 samples, 20.14%)</title><rect x="496.9" y="341" width="237.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="499.95" y="351.5" >std::panicking::try</text>
</g>
<g >
<title>bprm_execve.part.0 (88,276 samples, 0.04%)</title><rect x="981.6" y="421" width="0.5" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="984.60" y="431.5" ></text>
</g>
<g >
<title>_start (44,107,476 samples, 20.14%)</title><rect x="496.9" y="517" width="237.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="499.95" y="527.5" >_start</text>
</g>
<g >
<title>nix::errno::&lt;impl nix::errno::consts::Errno&gt;::result (43,919,635 samples, 20.05%)</title><rect x="498.0" y="213" width="236.6" height="15.0" fill="rgb(251,216,51)" rx="2" ry="2" />
<text  x="500.96" y="223.5" >nix::errno::&lt;impl nix::errno::c..</text>
</g>
<g >
<title>exc_page_fault (43,919,635 samples, 20.05%)</title><rect x="498.0" y="165" width="236.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="500.96" y="175.5" >exc_page_fault</text>
</g>
<g >
<title>__perf_event_task_sched_in (93,987 samples, 0.04%)</title><rect x="497.5" y="101" width="0.5" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="500.45" y="111.5" ></text>
</g>
<g >
<title>__handle_mm_fault (43,919,635 samples, 20.05%)</title><rect x="498.0" y="117" width="236.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="500.96" y="127.5" >__handle_mm_fault</text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (93,854 samples, 0.04%)</title><rect x="496.9" y="213" width="0.6" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="499.95" y="223.5" ></text>
</g>
<g >
<title>native_write_msr (88,276 samples, 0.04%)</title><rect x="981.6" y="245" width="0.5" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="984.60" y="255.5" ></text>
</g>
<g >
<title>std::panicking::try (44,107,476 samples, 20.14%)</title><rect x="496.9" y="405" width="237.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="499.95" y="415.5" >std::panicking::try</text>
</g>
<g >
<title>__schedule (93,854 samples, 0.04%)</title><rect x="496.9" y="133" width="0.6" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="499.95" y="143.5" ></text>
</g>
<g >
<title>alloc_anon_folio (38,504,700 samples, 17.58%)</title><rect x="982.1" y="133" width="207.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="985.08" y="143.5" >alloc_anon_folio</text>
</g>
<g >
<title>path_openat (90,391,831 samples, 41.27%)</title><rect x="10.0" y="309" width="486.9" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >path_openat</text>
</g>
<g >
<title>schedule_tail (160,856 samples, 0.07%)</title><rect x="980.7" y="485" width="0.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="983.73" y="495.5" ></text>
</g>
<g >
<title>mmap_region (45,697,349 samples, 20.86%)</title><rect x="734.6" y="293" width="246.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="737.56" y="303.5" >mmap_region</text>
</g>
<g >
<title>__GI__Fork (93,987 samples, 0.04%)</title><rect x="497.5" y="197" width="0.5" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="500.45" y="207.5" ></text>
</g>
<g >
<title>__GI_execve (38,504,700 samples, 17.58%)</title><rect x="982.1" y="357" width="207.4" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="985.08" y="367.5" >__GI_execve</text>
</g>
<g >
<title>bprm_execve (88,276 samples, 0.04%)</title><rect x="981.6" y="437" width="0.5" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="984.60" y="447.5" ></text>
</g>
<g >
<title>ctx_resched (88,276 samples, 0.04%)</title><rect x="981.6" y="309" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="984.60" y="319.5" ></text>
</g>
<g >
<title>all (219,042,553 samples, 100%)</title><rect x="10.0" y="549" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>ret_from_fork_asm (160,856 samples, 0.07%)</title><rect x="980.7" y="517" width="0.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="983.73" y="527.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (90,391,831 samples, 41.27%)</title><rect x="10.0" y="373" width="486.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >do_execveat_common.isra.0</text>
</g>
<g >
<title>do_fault (43,919,635 samples, 20.05%)</title><rect x="498.0" y="85" width="236.6" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="500.96" y="95.5" >do_fault</text>
</g>
<g >
<title>search_binary_handler (45,697,349 samples, 20.86%)</title><rect x="734.6" y="389" width="246.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="737.56" y="399.5" >search_binary_handler</text>
</g>
<g >
<title>alloc_pages_mpol (38,504,700 samples, 17.58%)</title><rect x="982.1" y="101" width="207.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="985.08" y="111.5" >alloc_pages_mpol</text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h2380a81d9a082bce (44,107,476 samples, 20.14%)</title><rect x="496.9" y="293" width="237.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="499.95" y="303.5" >std::rt::lang_start::_$u7b$$u7b..</text>
</g>
<g >
<title>__perf_event_task_sched_in (92,065 samples, 0.04%)</title><rect x="1189.5" y="309" width="0.5" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="1192.50" y="319.5" ></text>
</g>
<g >
<title>__libc_start_call_main (44,107,476 samples, 20.14%)</title><rect x="496.9" y="485" width="237.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="499.95" y="495.5" >__libc_start_call_main</text>
</g>
<g >
<title>__handle_mm_fault (38,504,700 samples, 17.58%)</title><rect x="982.1" y="181" width="207.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="985.08" y="191.5" >__handle_mm_fault</text>
</g>
<g >
<title>bprm_execve (45,697,349 samples, 20.86%)</title><rect x="734.6" y="437" width="246.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="737.56" y="447.5" >bprm_execve</text>
</g>
<g >
<title>copy_string_kernel (38,504,700 samples, 17.58%)</title><rect x="982.1" y="261" width="207.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="985.08" y="271.5" >copy_string_kernel</text>
</g>
<g >
<title>handle_pte_fault (43,919,635 samples, 20.05%)</title><rect x="498.0" y="101" width="236.6" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="500.96" y="111.5" >handle_pte_fault</text>
</g>
<g >
<title>load_elf_binary (88,276 samples, 0.04%)</title><rect x="981.6" y="373" width="0.5" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="984.60" y="383.5" ></text>
</g>
<g >
<title>perf_iterate_ctx (45,697,349 samples, 20.86%)</title><rect x="734.6" y="261" width="246.1" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="737.56" y="271.5" >perf_iterate_ctx</text>
</g>
<g >
<title>asm_exc_page_fault (43,919,635 samples, 20.05%)</title><rect x="498.0" y="181" width="236.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="500.96" y="191.5" >asm_exc_page_fault</text>
</g>
<g >
<title>begin_new_exec (88,276 samples, 0.04%)</title><rect x="981.6" y="357" width="0.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="984.60" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_execve (45,697,349 samples, 20.86%)</title><rect x="734.6" y="469" width="246.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="737.56" y="479.5" >__x64_sys_execve</text>
</g>
<g >
<title>do_read_fault (43,919,635 samples, 20.05%)</title><rect x="498.0" y="69" width="236.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="500.96" y="79.5" >do_read_fault</text>
</g>
<g >
<title>inode_permission (90,391,831 samples, 41.27%)</title><rect x="10.0" y="277" width="486.9" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >inode_permission</text>
</g>
<g >
<title>x64_sys_call (38,504,700 samples, 17.58%)</title><rect x="982.1" y="309" width="207.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="985.08" y="319.5" >x64_sys_call</text>
</g>
<g >
<title>intel_pmu_enable_all (92,065 samples, 0.04%)</title><rect x="1189.5" y="261" width="0.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1192.50" y="271.5" ></text>
</g>
<g >
<title>[dash] (38,596,765 samples, 17.62%)</title><rect x="982.1" y="421" width="207.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="985.08" y="431.5" >[dash]</text>
</g>
<g >
<title>load_elf_binary (45,697,349 samples, 20.86%)</title><rect x="734.6" y="373" width="246.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="737.56" y="383.5" >load_elf_binary</text>
</g>
<g >
<title>ret_from_fork (93,987 samples, 0.04%)</title><rect x="497.5" y="149" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="500.45" y="159.5" ></text>
</g>
<g >
<title>perf_ctx_enable (160,856 samples, 0.07%)</title><rect x="980.7" y="437" width="0.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="983.73" y="447.5" ></text>
</g>
<g >
<title>irqentry_exit (93,854 samples, 0.04%)</title><rect x="496.9" y="181" width="0.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="499.95" y="191.5" ></text>
</g>
<g >
<title>x86_pmu_enable (88,276 samples, 0.04%)</title><rect x="981.6" y="277" width="0.5" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="984.60" y="287.5" ></text>
</g>
<g >
<title>x64_sys_call (88,276 samples, 0.04%)</title><rect x="981.6" y="485" width="0.5" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="984.60" y="495.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (93,987 samples, 0.04%)</title><rect x="497.5" y="117" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="500.45" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (45,697,349 samples, 20.86%)</title><rect x="734.6" y="501" width="246.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="737.56" y="511.5" >do_syscall_64</text>
</g>
<g >
<title>[dash] (38,596,765 samples, 17.62%)</title><rect x="982.1" y="437" width="207.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="985.08" y="447.5" >[dash]</text>
</g>
<g >
<title>__perf_event_task_sched_in (93,854 samples, 0.04%)</title><rect x="496.9" y="101" width="0.6" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="499.95" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (38,504,700 samples, 17.58%)</title><rect x="982.1" y="341" width="207.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="985.08" y="351.5" >entry_SYSCALL_64_after_hwfr..</text>
</g>
<g >
<title>__perf_addr_filters_adjust (45,697,349 samples, 20.86%)</title><rect x="734.6" y="245" width="246.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="737.56" y="255.5" >__perf_addr_filters_adjust</text>
</g>
<g >
<title>filemap_map_pages (43,919,635 samples, 20.05%)</title><rect x="498.0" y="53" width="236.6" height="15.0" fill="rgb(229,112,27)" rx="2" ry="2" />
<text  x="500.96" y="63.5" >filemap_map_pages</text>
</g>
<g >
<title>irqentry_exit_to_user_mode (93,854 samples, 0.04%)</title><rect x="496.9" y="165" width="0.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="499.95" y="175.5" ></text>
</g>
<g >
<title>native_write_msr (160,856 samples, 0.07%)</title><rect x="980.7" y="389" width="0.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="983.73" y="399.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (45,697,349 samples, 20.86%)</title><rect x="734.6" y="421" width="246.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="737.56" y="431.5" >bprm_execve.part.0</text>
</g>
<g >
<title>std::rt::lang_start (44,107,476 samples, 20.14%)</title><rect x="496.9" y="453" width="237.7" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="499.95" y="463.5" >std::rt::lang_start</text>
</g>
<g >
<title>main (44,107,476 samples, 20.14%)</title><rect x="496.9" y="469" width="237.7" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="499.95" y="479.5" >main</text>
</g>
<g >
<title>__execvpex (90,391,831 samples, 41.27%)</title><rect x="10.0" y="485" width="486.9" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >__execvpex</text>
</g>
<g >
<title>do_execveat_common.isra.0 (45,697,349 samples, 20.86%)</title><rect x="734.6" y="453" width="246.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="737.56" y="463.5" >do_execveat_common.isra.0</text>
</g>
<g >
<title>do_syscall_64 (90,391,831 samples, 41.27%)</title><rect x="10.0" y="421" width="486.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >do_syscall_64</text>
</g>
<g >
<title>ret_from_fork (160,856 samples, 0.07%)</title><rect x="980.7" y="501" width="0.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="983.73" y="511.5" ></text>
</g>
<g >
<title>perf_ctx_enable (88,276 samples, 0.04%)</title><rect x="981.6" y="293" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="984.60" y="303.5" ></text>
</g>
<g >
<title>get_arg_page (38,504,700 samples, 17.58%)</title><rect x="982.1" y="245" width="207.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="985.08" y="255.5" >get_arg_page</text>
</g>
<g >
<title>finish_task_switch.isra.0 (92,065 samples, 0.04%)</title><rect x="1189.5" y="325" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1192.50" y="335.5" ></text>
</g>
<g >
<title>schedule_tail (93,987 samples, 0.04%)</title><rect x="497.5" y="133" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="500.45" y="143.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (160,856 samples, 0.07%)</title><rect x="980.7" y="469" width="0.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="983.73" y="479.5" ></text>
</g>
<g >
<title>native_write_msr (93,854 samples, 0.04%)</title><rect x="496.9" y="37" width="0.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="499.95" y="47.5" ></text>
</g>
<g >
<title>x86_pmu_enable (93,987 samples, 0.04%)</title><rect x="497.5" y="69" width="0.5" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="500.45" y="79.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (93,854 samples, 0.04%)</title><rect x="496.9" y="117" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="499.95" y="127.5" ></text>
</g>
<g >
<title>perf-exec (88,276 samples, 0.04%)</title><rect x="981.6" y="533" width="0.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="984.60" y="543.5" ></text>
</g>
<g >
<title>native_write_msr (92,065 samples, 0.04%)</title><rect x="1189.5" y="245" width="0.5" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1192.50" y="255.5" ></text>
</g>
<g >
<title>binary_search_perf::binary_search (93,854 samples, 0.04%)</title><rect x="496.9" y="229" width="0.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="499.95" y="239.5" ></text>
</g>
<g >
<title>&lt;i32 as nix::errno::ErrnoSentinel&gt;::sentinel (43,919,635 samples, 20.05%)</title><rect x="498.0" y="197" width="236.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="500.96" y="207.5" >&lt;i32 as nix::errno::ErrnoSentin..</text>
</g>
<g >
<title>__libc_start_call_main (38,596,765 samples, 17.62%)</title><rect x="982.1" y="485" width="207.9" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="985.08" y="495.5" >__libc_start_call_main</text>
</g>
<g >
<title>clear_page_erms (38,504,700 samples, 17.58%)</title><rect x="982.1" y="53" width="207.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="985.08" y="63.5" >clear_page_erms</text>
</g>
<g >
<title>__x64_sys_execve (90,391,831 samples, 41.27%)</title><rect x="10.0" y="389" width="486.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >__x64_sys_execve</text>
</g>
<g >
<title>__libc_start_main_impl (44,107,476 samples, 20.14%)</title><rect x="496.9" y="501" width="237.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="499.95" y="511.5" >__libc_start_main_impl</text>
</g>
<g >
<title>[unknown] (90,391,831 samples, 41.27%)</title><rect x="10.0" y="517" width="486.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >[unknown]</text>
</g>
<g >
<title>native_write_msr (93,987 samples, 0.04%)</title><rect x="497.5" y="37" width="0.5" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="500.45" y="47.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (44,107,476 samples, 20.14%)</title><rect x="496.9" y="389" width="237.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="499.95" y="399.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>[dash] (38,596,765 samples, 17.62%)</title><rect x="982.1" y="453" width="207.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="985.08" y="463.5" >[dash]</text>
</g>
<g >
<title>perf_ctx_enable (93,854 samples, 0.04%)</title><rect x="496.9" y="85" width="0.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="499.95" y="95.5" ></text>
</g>
<g >
<title>[dash] (38,596,765 samples, 17.62%)</title><rect x="982.1" y="469" width="207.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="985.08" y="479.5" >[dash]</text>
</g>
<g >
<title>do_syscall_64 (88,276 samples, 0.04%)</title><rect x="981.6" y="501" width="0.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="984.60" y="511.5" ></text>
</g>
<g >
<title>ret_from_fork (92,065 samples, 0.04%)</title><rect x="1189.5" y="357" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1192.50" y="367.5" ></text>
</g>
<g >
<title>__GI_execve (90,391,831 samples, 41.27%)</title><rect x="10.0" y="453" width="486.9" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >__GI_execve</text>
</g>
<g >
<title>__libc_start_main_impl (38,596,765 samples, 17.62%)</title><rect x="982.1" y="501" width="207.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="985.08" y="511.5" >__libc_start_main_impl</text>
</g>
<g >
<title>__libc_vfork (92,065 samples, 0.04%)</title><rect x="1189.5" y="389" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1192.50" y="399.5" ></text>
</g>
<g >
<title>do_anonymous_page (38,504,700 samples, 17.58%)</title><rect x="982.1" y="149" width="207.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="985.08" y="159.5" >do_anonymous_page</text>
</g>
<g >
<title>std::panic::catch_unwind (44,107,476 samples, 20.14%)</title><rect x="496.9" y="357" width="237.7" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="499.95" y="367.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>__perf_event_task_sched_in (160,856 samples, 0.07%)</title><rect x="980.7" y="453" width="0.9" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="983.73" y="463.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (93,854 samples, 0.04%)</title><rect x="496.9" y="53" width="0.6" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="499.95" y="63.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (45,697,349 samples, 20.86%)</title><rect x="734.6" y="517" width="246.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="737.56" y="527.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>intel_pmu_enable_all (88,276 samples, 0.04%)</title><rect x="981.6" y="261" width="0.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="984.60" y="271.5" ></text>
</g>
<g >
<title>sh (38,596,765 samples, 17.62%)</title><rect x="982.1" y="533" width="207.9" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="985.08" y="543.5" >sh</text>
</g>
<g >
<title>do_filp_open (90,391,831 samples, 41.27%)</title><rect x="10.0" y="325" width="486.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >do_filp_open</text>
</g>
<g >
<title>[dash] (38,596,765 samples, 17.62%)</title><rect x="982.1" y="405" width="207.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="985.08" y="415.5" >[dash]</text>
</g>
<g >
<title>intel_pmu_enable_all (160,856 samples, 0.07%)</title><rect x="980.7" y="405" width="0.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="983.73" y="415.5" ></text>
</g>
<g >
<title>nix::unistd::fork (44,013,622 samples, 20.09%)</title><rect x="497.5" y="229" width="237.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="500.45" y="239.5" >nix::unistd::fork</text>
</g>
<g >
<title>std::sys_common::backtrace::__rust_begin_short_backtrace (44,107,476 samples, 20.14%)</title><rect x="496.9" y="277" width="237.7" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="499.95" y="287.5" >std::sys_common::backtrace::__r..</text>
</g>
<g >
<title>vm_mmap (45,697,349 samples, 20.86%)</title><rect x="734.6" y="341" width="246.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="737.56" y="351.5" >vm_mmap</text>
</g>
<g >
<title>perf_event_enable_on_exec (88,276 samples, 0.04%)</title><rect x="981.6" y="325" width="0.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="984.60" y="335.5" ></text>
</g>
<g >
<title>std::panicking::try::do_call (44,107,476 samples, 20.14%)</title><rect x="496.9" y="325" width="237.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="499.95" y="335.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>[dash] (38,504,700 samples, 17.58%)</title><rect x="982.1" y="373" width="207.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="985.08" y="383.5" >[dash]</text>
</g>
<g >
<title>perf_ctx_enable (92,065 samples, 0.04%)</title><rect x="1189.5" y="293" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1192.50" y="303.5" ></text>
</g>
<g >
<title>schedule_tail (92,065 samples, 0.04%)</title><rect x="1189.5" y="341" width="0.5" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.50" y="351.5" ></text>
</g>
<g >
<title>search_binary_handler (88,276 samples, 0.04%)</title><rect x="981.6" y="389" width="0.5" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="984.60" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (43,919,635 samples, 20.05%)</title><rect x="498.0" y="133" width="236.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="500.96" y="143.5" >handle_mm_fault</text>
</g>
<g >
<title>elf_load (45,697,349 samples, 20.86%)</title><rect x="734.6" y="357" width="246.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="737.56" y="367.5" >elf_load</text>
</g>
<g >
<title>perf_event_mmap (45,697,349 samples, 20.86%)</title><rect x="734.6" y="277" width="246.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="737.56" y="287.5" >perf_event_mmap</text>
</g>
<g >
<title>exec_binprm (88,276 samples, 0.04%)</title><rect x="981.6" y="405" width="0.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="984.60" y="415.5" ></text>
</g>
<g >
<title>__execvpe_common (90,391,831 samples, 41.27%)</title><rect x="10.0" y="469" width="486.9" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >__execvpe_common</text>
</g>
</g>
</svg>
